<?php

/**
 * Created by PhpStorm.
 * User: CaoLong
 * Date: 7/5/2016
 * Time: 5:26 PM
 */
class Warehouse_order_plans extends Manager_base {
    public function __construct() {
        parent::__construct();
        $this->is_in_group(['admin', 'corporation', 'ppc', 'warehouse_manager'], TRUE);
        $this->load->model('M_order', 'order');
        $this->load->model('M_materials', 'm_materials');
        $this->load->model('M_material_balances', 'm_material_balances');
        $this->load->model('M_warehouse_activity', 'm_warehouse_activity');
        $this->load->model('M_user', 'user');
        $this->load->model('M_warehouses', 'warehouses');
        $this->load->model('M_warehouse_activity_items', 'warehouse_activity_items');
        $this->load->model('M_warehouse_activity_manage', 'warehouse_activity_manage');
        $this->load_more_js("assets/js/page/warehouse/warehouse.js", TRUE);
        $this->load_more_css("assets/css/page/warehouse.css");
    }

    public function setting_class() {
        // TODO: Implement setting_class() method.
        $this->name = Array(
            "class"  => "warehouse_order_plans",
            "view"   => "warehouse_order_plans",
            "model"  => "m_warehouse_activity",
            "object" => "lịch trình đơn hàng về kho",
        );
    }

    // ham kiem tra trong luc viet form-view
    public function index() {
        $this->load_more_css("assets/plugins-bower/bootstrap-datepicker/dist/css/bootstrap-datepicker.css");
        $this->load_more_js("assets/plugins-bower/bootstrap-datepicker/dist/js/bootstrap-datepicker.js", TRUE);
        parent::index(); // TODO: Change the autogenerated stub
    }

    // overide manager function
    public function manager($data = Array()) {
        $data['add_link'] = 'warehouse_order_plans/add_warehouse_order_plans';
        return parent::manager($data);
    }

    public function add_warehouse_order_plans() {
        $data = Array();
        if (!isset($data["save_link"])) {
            $data["save_link"] = site_url($this->name["class"] . "/save_order_material");
        }
        $where = [
        ];
        $data['materials'] = $this->m_material_balances->get_list_filter($where, [], []);
        $data['users'] = $this->user->get_all();
        $data['warehouses'] = $this->warehouses->get_all();
        $content = $this->load->view("company/warehouse_order_plans/form_warehouse_order_plans", $data, TRUE);
        $this->set_data_part("title", "Thêm  " . $this->name["object"], FALSE);
        $data_return = Array();
        if ($this->input->is_ajax_request()) {
            $data_return["state"] = 1;
            $data_return["html"] = $content;
            echo json_encode($data_return);
            return TRUE;
        } else {
            $this->show_page($content);
        }
    }

    // test view-edit-form
    public function check_form() {
        $content = $this->load->view("company/warehouse_order_plans/form_check_warehouse_order_plans", null, TRUE);
        $this->show_page($content);
    }

    public function save_order_material($data = Array(), $data_return = Array(), $skip_validate = FALSE) {
        if (sizeof($data) == 0) {
            $data = $this->input->post();
        }
        $wh_activity = [
            'type'          => "0",
            'user_id'       => $data["user_create_order"],
            'warehouse_id'  => $data["warehouse_name"],
            'time_receive'  => $data["time-receive"],
            'note'          => $data["note"],
            'material_pack' => $data["id_lot"],
        ];
        $wh_activity_id = $this->m_warehouse_activity->insert($wh_activity, TRUE);

        if (!$wh_activity_id) {
            $data_return["state"] = 0;
            $data_return["msg"] = "Thêm bản ghi thất bại do lỗi server, vui lòng thử lại hoặc liên hệ quản lý hệ thống!";
            echo json_encode($data_return);
            return FALSE;
        }
        if (isset($data["material_name"])) {
            $new_weight_detail1 = [
                'material_balance_id' => $data["material_name"],
                'quantity'            => $data["quantity"],
                'activity_id'         => $wh_activity_id,
                'note'                => $data["item_note"],
            ];
            $insert_size_id1 = $this->warehouse_activity_items->insert($new_weight_detail1, TRUE);
            if (!$insert_size_id1) {
                $data_return["state"] = 0; /* state = 2 : Lỗi thêm bản ghi */
                $data_return["msg"] = "Thêm bản ghi thất bại do lỗi server, vui lòng thử lại hoặc liên hệ quản lý hệ thống!";
                echo json_encode($data_return);
                return FALSE;
            }
        }
        $weight_count = $data["weight_count"];
        for ($i = 0; $i < $weight_count; $i++) {
//            if (isset($data["material_name_$i"])) {
            $new_weight_detail = [
                'material_balance_id' => $data["material_name_$i"],
                'quantity'            => $data["quantity_$i"],
                'activity_id'         => $wh_activity_id,
                'note'                => $data["item_note_$i"],
            ];

            $insert_size_id = $this->warehouse_activity_items->insert($new_weight_detail, TRUE);
            if (!$insert_size_id) {
                $data_return["state"] = 0; /* state = 2 : Lỗi thêm bản ghi */
                $data_return["msg"] = "Thêm bản ghi thất bại do lỗi server, vui lòng thử lại hoặc liên hệ quản lý hệ thống!";
                echo json_encode($data_return);
                return FALSE;
            }
//            }
        }
        $data_return["callback"] = "save_form_add_response";
//        $data_return["key_name"] = $key_field;
//            $data_return["record"] = $data_validated;
        $data_return["state"] = 1; /* state = 1 : insert thành công */
        $data_return["msg"] = "Thêm bản ghi thành công";
//            $data_return["redirect"] = $this->url["manager"];
        echo json_encode($data_return);
    }

    public function add($data = Array()) {
        if ($this->_have_permission()) {
            return parent::add($data);
        }
        echo json_encode([
            "callback" => "permission_error",
            "state"    => 0,
            "msg"      => "Bạn không có quyền thêm!",
        ]);
        return FALSE;
    }

    public function view($id = 0, $data = Array()) {
        if (!isset($data["save_link"])) {
            $data["save_link"] = site_url($this->name["class"] . "/save_check_warehouse_activity/" . $id);
        }
        $data['users'] = $this->user->get_all();
        $data['warehouses'] = $this->warehouses->get_all();
        $where = [
            "m.id" => $id,
        ];
        $data['wh_activities'] = $this->model->get_list_filter($where, [], []);
        $where = [
        ];
        $data['materials'] = $this->m_material_balances->get_list_filter($where, [], []);
        $where = [
            "m.activity_id" => $id,
        ];
        $data['activity_items'] = $this->warehouse_activity_manage->get_list_filter($where, [], []);
        $data["current_user"] = (object)$this->session->userdata();
        $content = $this->load->view('company/warehouse_order_plans/form_check_warehouse_order_plans', $data, TRUE);
        $data_return = Array();
        if (!$id) {
            $data_return["state"] = 0;
            $data_return["msg"] = "Id không tồn tại";
            echo json_encode($data_return);
            return FALSE;
        }
        if ($this->input->is_ajax_request()) {
            $data_return["state"] = 1;
            $data_return["html"] = $content;
            echo json_encode($data_return);
            return TRUE;
        } else {
            $this->show_page($content);
        }
    }

    public function save_check_warehouse_activity($id = 0, $data = Array(), $data_return = Array(), $skip_validate = FALSE) {
        if (!isset($data_return["callback"])) {
            $data_return["callback"] = "save_form_edit_response";
        }
        $id = intval($id);
        if (!$id) {
            $data_return["state"] = 0; /* state = 0 : dữ liệu không hợp lệ */
            $data_return["msg"] = "Bản ghi không tồn tại";
            echo json_encode($data_return);
            return FALSE;
        }
        if (sizeof($data) == 0) {
            $data = $this->input->post();
        }
        $order_plan_date_factual = [
            'date' => date("Y-m-d"),
        ];
        $update = $this->m_warehouse_activity->update($id, $order_plan_date_factual, TRUE);
        if (!$update) {
            $data_return["data"] = $data;
            $data_return["state"] = 0; /* state = 0 : dữ liệu không hợp lệ */
            $data_return["msg"] = "Dữ liệu gửi lên không hợp lệ";
            $data_return["error"] = $this->model->get_validate_error();
            echo json_encode($data_return);
            return FALSE;
        }
        $wh_activity = [
            'type'          => "1",
            'user_id'       => $data["user_id_create_wh_activity"],
            'warehouse_id'  => $data["warehouse_id"],
            'date'          => date("Y-m-d"),
            'note'          => $data["note"],
            'material_pack' => $data["material_pack"],
        ];
        $wh_activity_id = $this->m_warehouse_activity->insert($wh_activity, TRUE);

        if (!$wh_activity_id) {
            $data_return["state"] = 0;
            $data_return["msg"] = "Thêm bản ghi thất bại do lỗi server, vui lòng thử lại hoặc liên hệ quản lý hệ thống!";
            echo json_encode($data_return);
            return FALSE;
        }
        $template_item_count = $data["template_item_count"];
        for ($i = 1; $i < $template_item_count; $i++) {
            $new_weight_detail_template = [
                'material_balance_id' => $data["material_balance_id_$i"],
                'quantity'            => $data["quantity_factual_$i"],
                'activity_id'         => $wh_activity_id,
                'note'                => $data["note_$i"],
            ];
            $insert_item_template_id = $this->warehouse_activity_items->insert($new_weight_detail_template, TRUE);
            if (!$insert_item_template_id) {
                $data_return["state"] = 0; /* state = 2 : Lỗi thêm bản ghi */
                $data_return["msg"] = "Thêm bản ghi thất bại do lỗi server, vui lòng thử lại hoặc liên hệ quản lý hệ thống!";
                echo json_encode($data_return);
                return FALSE;
            }
        }
        $weight_count = $data["weight_count"];
        for ($i = 0; $i < $weight_count; $i++) {
            $new_weight_detail = [
                'material_balance_id' => $data["material_name_$i"],
                'quantity'            => $data["quantity_$i"],
                'activity_id'         => $wh_activity_id,
                'note'                => $data["item_note_$i"],
            ];
            $insert_size_id = $this->warehouse_activity_items->insert($new_weight_detail, TRUE);
            if (!$insert_size_id) {
                $data_return["state"] = 0; /* state = 2 : Lỗi thêm bản ghi */
                $data_return["msg"] = "Thêm bản ghi thất bại do lỗi server, vui lòng thử lại hoặc liên hệ quản lý hệ thống!";
                echo json_encode($data_return);
                return FALSE;
            }
        }
        $data_return["callback"] = "save_form_add_response";
//        $data_return["key_name"] = $key_field;
//            $data_return["record"] = $data_validated;
        $data_return["state"] = 1; /* state = 1 : insert thành công */
        $data_return["msg"] = "Thêm bản ghi thành công";
//            $data_return["redirect"] = $this->url["manager"];
        echo json_encode($data_return);
    }

    public function edit($id = 0, $data = Array()) {
        if (!isset($data["save_link"])) {
            $data["save_link"] = site_url($this->name["class"] . "/edit_save_order_material/" . $id);
        }
        $data['users'] = $this->user->get_all();
        $data['warehouses'] = $this->warehouses->get_all();
        $where = [
            "m.id" => $id,
        ];
        $data['wh_activities'] = $this->model->get_list_filter($where, [], []);
        $where = [
        ];
        $data['materials'] = $this->m_material_balances->get_list_filter($where, [], []);
        $where = [
            "m.activity_id" => $id,
        ];
        $data['activity_items'] = $this->warehouse_activity_manage->get_list_filter($where, [], []);
        $content = $this->load->view('company/warehouse_order_plans/edit_wh_order_plans', $data, TRUE);
        $data_return = Array();
        if (!$id) {
            $data_return["state"] = 0;
            $data_return["msg"] = "Id không tồn tại";
            echo json_encode($data_return);
            return FALSE;
        }
        if ($this->input->is_ajax_request()) {
            $data_return["state"] = 1;
            $data_return["html"] = $content;
            echo json_encode($data_return);
            return TRUE;
        } else {
            $this->show_page($content);
        }
    }

    public function edit_save_order_material($id = 0, $data = Array(), $data_return = Array(), $skip_validate = FALSE) {
        if (!isset($data_return["callback"])) {
            $data_return["callback"] = "save_form_edit_response";
        }
        $id = intval($id);
        if (!$id) {
            $data_return["state"] = 0; /* state = 0 : dữ liệu không hợp lệ */
            $data_return["msg"] = "Bản ghi không tồn tại";
            echo json_encode($data_return);
            return FALSE;
        }
        if (sizeof($data) == 0) {
            $data = $this->input->post();
        }
        $wh_activity = [
            'user_id'       => $data["user_create_order"],
            'warehouse_id'  => $data["warehouse_name"],
            'time_receive'  => $data["time-receive"],
            'note'          => $data["note"],
            'material_pack' => $data["id_lot"],
        ];
        $update = $this->m_warehouse_activity->update($id, $wh_activity, TRUE);
        if (!$update) {
            $data_return["data"] = $data;
            $data_return["state"] = 0; /* state = 0 : dữ liệu không hợp lệ */
            $data_return["msg"] = "Dữ liệu gửi lên không hợp lệ";
            $data_return["error"] = $this->model->get_validate_error();
            echo json_encode($data_return);
            return FALSE;
        }
        $weight_count = $data["weight_count"];
        for ($i = 0; $i < $weight_count; $i++) {
            $new_weight_detail = [
                'material_balance_id' => $data["material_name_$i"],
                'quantity'            => $data["quantity_$i"],
                'activity_id'         => $id,
                'note'                => $data["item_note_$i"],
            ];

            $insert_size_id = $this->warehouse_activity_items->insert($new_weight_detail, TRUE);
            if (!$insert_size_id) {
                $data_return["state"] = 0; /* state = 2 : Lỗi thêm bản ghi */
                $data_return["msg"] = "Thêm bản ghi thất bại do lỗi server, vui lòng thử lại hoặc liên hệ quản lý hệ thống!";
                echo json_encode($data_return);
                return FALSE;
            }
        }
        $data_return["key_name"] = $this->model->get_primary_key();
        $data_return["record"] = $this->standard_record_data($this->model->get($id));
        $data_return["state"] = 1; /* state = 1 : insert thành công */
        $data_return["msg"] = "Sửa bản ghi thành công.";
        echo json_encode($data_return);;
        return TRUE;
    }

    private function _have_permission() {
        return $this->is_in_group('admin') || $this->is_in_group("corporation") || $this->is_in_group("ppc");
    }

    public function check_order_late($origin_column_value, $column_name, &$record, $column_data, $caller) {
        if (!strtotime($record->date)) {
            if (strtotime($record->time_receive) > strtotime(date("Y-m-d"))) {
                return FALSE;
            } else {
                return TRUE;
            }
        }
    }

    public function add_action_button($origin_column_value, $column_name, &$record, $column_data, $caller) {

        if ($this->is_in_group(['admin', 'corporation', 'ppc'], TRUE)) {
            $primary_key = $this->model->get_primary_key();
            $custom_action = "<div class='action-buttons'>";
            $custom_action .= "<a class='e_ajax_link blue' href='" . site_url($this->url["view"] . $record->$primary_key) . "'><i class='ace-icon fa fa-search-plus bigger-130'></i></a>";
            if ((!isset($record->disable_edit) || !$record->disable_edit)) {
                $custom_action .= "<a class='e_ajax_link green' href='" . site_url($this->url["edit"] . $record->$primary_key) . "'><i class='ace-icon fa fa-pencil bigger-130'></i></a>";
                $custom_action .= "<a class='e_ajax_link e_ajax_confirm red' href='" . site_url($this->url["delete"] . $record->$primary_key) . "'><i class='ace-icon fa fa-trash-o  bigger-130'></i></a>";
            }
            $custom_action .= "</div>";
            return $custom_action;
        }
        if ($this->is_in_group(['warehouse_manager'], TRUE)) {
            $primary_key = $this->model->get_primary_key();
            $custom_action = "<div class='action-buttons'>";
            $custom_action .= "<a class='e_ajax_link blue' href='" . site_url($this->url["view"] . $record->$primary_key) . "'><i class='ace-icon fa fa-search-plus bigger-130'></i></a>";
            $custom_action .= "</div>";
            return $custom_action;
        }
    }
}